// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  //output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql" // or "mysql" based on your preference
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  CUSTOMER
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum ShippingStatus {
  PENDING
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
}

enum AddressType {
  SHIPPING
  BILLING
}

// Core User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String
  role      UserRole @default(CUSTOMER)
  isActive  Boolean  @default(true)

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastLogin DateTime?

  // Relations
  addresses     Address[]
  orders        Order[]
  cartItems     CartItem[]
  reviews       Review[]
  wishlistItems WishlistItem[]

  // Seller specific
  sellerProfile SellerProfile?

  @@map("users")
}

model Address {
  id           String      @id @default(cuid())
  userId       String
  type         AddressType @default(SHIPPING)
  firstName    String
  lastName     String
  phone        String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String      @default("IN")
  isDefault    Boolean     @default(false)

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

// Seller Management
model SellerProfile {
  id           String  @id @default(cuid())
  userId       String  @unique
  businessName String
  businessType String? // individual, company, partnership
  taxId        String?
  description  String?
  logo         String?
  banner       String?
  phone        String?
  website      String?
  isVerified   Boolean @default(false)
  isActive     Boolean @default(true)

  // Commission settings
  commissionRate Float @default(10.0) // percentage

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products Product[]
  orders   Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("seller_profiles")
}

// Category Management
model Category {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?
  image       String?
  parentId    String?
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

// Product Management
model Product {
  id               String        @id @default(cuid())
  name             String
  slug             String        @unique
  description      String?
  shortDescription String?
  sku              String        @unique
  status           ProductStatus @default(DRAFT)

  // Pricing
  basePrice Float
  salePrice Float?
  costPrice Float?

  // Inventory
  trackInventory    Boolean @default(true)
  stockQuantity     Int     @default(0)
  lowStockThreshold Int     @default(10)

  // SEO & Meta
  metaTitle       String?
  metaDescription String?

  // Relations
  sellerId   String
  categoryId String
  seller     SellerProfile @relation(fields: [sellerId], references: [id])
  category   Category      @relation(fields: [categoryId], references: [id])

  images        ProductImage[]
  variants      ProductVariant[]
  attributes    ProductAttribute[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  reviews       Review[]
  wishlistItems WishlistItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  altText   String?
  sortOrder Int     @default(0)
  isMain    Boolean @default(false)

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("product_images")
}

// Product Variants (for size, color, material combinations)
model ProductVariant {
  id            String  @id @default(cuid())
  productId     String
  sku           String  @unique
  name          String // e.g., "Small - Gold - Diamond"
  price         Float? // Override base price if needed
  stockQuantity Int     @default(0)
  isActive      Boolean @default(true)

  // Variant attributes (JSON for flexibility)
  attributes Json // { "size": "Small", "color": "Gold", "material": "Diamond" }

  // Relations
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems  CartItem[]
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_variants")
}

// Product Attributes (for jewelry-specific attributes)
model ProductAttribute {
  id        String @id @default(cuid())
  productId String
  name      String // e.g., "Metal Type", "Stone Type", "Carat Weight"
  value     String // e.g., "18K Gold", "Diamond", "0.5ct"

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_attributes")
}

// Shopping Cart
model CartItem {
  id        String  @id @default(cuid())
  userId    String
  productId String
  variantId String?
  quantity  Int     @default(1)

  // Relations
  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId, variantId])
  @@map("cart_items")
}

// Wishlist
model WishlistItem {
  id        String @id @default(cuid())
  userId    String
  productId String

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@map("wishlist_items")
}

// Order Management
model Order {
  id          String @id @default(cuid())
  orderNumber String @unique // Human-readable order number
  userId      String
  sellerId    String
  addressId   String

  // Order totals
  subtotal       Float
  taxAmount      Float @default(0)
  shippingAmount Float @default(0)
  discountAmount Float @default(0)
  totalAmount    Float

  // Status tracking
  status         OrderStatus    @default(PENDING)
  paymentStatus  PaymentStatus  @default(PENDING)
  shippingStatus ShippingStatus @default(PENDING)

  // Additional info
  notes String?

  // Relations
  user     User          @relation(fields: [userId], references: [id])
  seller   SellerProfile @relation(fields: [sellerId], references: [id])
  address  Address       @relation(fields: [addressId], references: [id])
  items    OrderItem[]
  payments Payment[]
  shipping Shipping?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  productId  String
  variantId  String?
  quantity   Int
  unitPrice  Float
  totalPrice Float

  // Snapshot data (in case product details change)
  productName  String
  productImage String?
  variantData  Json? // Snapshot of variant attributes

  // Relations
  order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

// Payment Management
model Payment {
  id            String        @id @default(cuid())
  orderId       String
  amount        Float
  currency      String        @default("INR")
  status        PaymentStatus @default(PENDING)
  paymentMethod String // stripe, paypal, etc.
  transactionId String? // External payment gateway transaction ID

  // Relations
  order Order @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

// Shipping Management
model Shipping {
  id             String         @id @default(cuid())
  orderId        String         @unique
  method         String // standard, express, overnight
  carrier        String? // UPS, FedEx, USPS
  trackingNumber String?
  status         ShippingStatus @default(PENDING)
  shippedAt      DateTime?
  deliveredAt    DateTime?

  // Relations
  order Order @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("shipping")
}

// Review System
model Review {
  id         String  @id @default(cuid())
  userId     String
  productId  String
  rating     Int // 1-5
  title      String?
  comment    String?
  isVerified Boolean @default(false) // Verified purchase

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId]) // One review per user per product
  @@map("reviews")
}
