// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== ENUMS ====================

enum UserRole {
  CUSTOMER
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum ShippingStatus {
  PENDING
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
}

// ==================== USER MANAGEMENT ====================

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String
  role          UserRole @default(CUSTOMER)
  firstName     String?
  lastName      String?
  phoneNumber   String?
  isVerified    Boolean  @default(false)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastLogin     DateTime?

  // Relations
  customer      Customer?
  seller        Seller?
  addresses     Address[]

  @@index([email])
  @@index([role])
  @@map("users")
}

model Customer {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  cart       Cart?
  orders     Order[]
  reviews    Review[]
  wishlist   Wishlist[]

  @@map("customers")
}

model Seller {
  id              String   @id @default(uuid())
  userId          String   @unique
  shopName        String   @unique
  shopDescription String?  @db.Text
  shopLogo        String?
  shopBanner      String?
  isVerified      Boolean  @default(false)
  isActive        Boolean  @default(true)
  rating          Float    @default(0)
  totalSales      Int      @default(0)
  socials         Json? // e.g., {"instagram": "insta_handle", "twitter": "twitter_handle"}
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products Product[]
  orderItems OrderItem[]

  @@index([shopName])
  @@index([isActive])
  @@map("sellers")
}

model Address {
  id           String   @id @default(uuid())
  userId       String
  fullName     String
  phoneNumber  String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  country      String
  postalCode   String
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@index([userId])
  @@map("addresses")
}

// ==================== PRODUCT MANAGEMENT ====================

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?  @db.Text
  image       String?
  parentId    String?
  sortOrder   Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@index([slug])
  @@index([parentId])
  @@map("categories")
}

model Product {
  id              String        @id @default(uuid())
  sellerId        String
  categoryId      String
  name            String
  slug            String        @unique
  shortDescription String?      @db.Text
  description     String        @db.Text
  status          ProductStatus @default(DRAFT)
  attributes      ProductAttribute[] // e.g., color, material
  weight          Float?        // Weight in grams
  dimensions      String?       // e.g., "10x5x3 cm"
  averageRating   Float         @default(0)
  totalReviews    Int           @default(0)
  totalSales      Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  seller              Seller              @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  category            Category            @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  defaultImages       ProductImage[]
  colorVariants       ProductColorVariant[]
  reviews             Review[]
  wishlist            Wishlist[]

  @@index([sellerId])
  @@index([categoryId])
  @@index([slug])
  @@index([status])
  @@map("products")
}

// Product Attributes (for jewelry-specific attributes)
model ProductAttribute {
  id        String @id @default(uuid())
  productId String
  name      String // e.g., "Metal Type", "Stone Type", "Carat Weight"
  value     String // e.g., "18K Gold", "Diamond", "0.5ct"

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("product_attributes")
}

// Default product images (shown regardless of color selection)
model ProductImage {
  id        String   @id @default(uuid())
  productId String
  imageUrl  String
  altText   String?
  position  Int      @default(0)
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("product_images")
}

// Color variants of a product
model ProductColorVariant {
  id          String   @id @default(uuid())
  productId   String
  colorName   String   // e.g., "Red", "Blue", "Yellow"
  colorCode   String?  // Hex code e.g., "#FF0000"
  isAvailable Boolean  @default(true)
  position    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  product       Product                   @relation(fields: [productId], references: [id], onDelete: Cascade)
  images        ColorVariantImage[]
  sizeVariants  ProductSizeVariant[]

  @@unique([productId, colorName])
  @@index([productId])
  @@map("product_color_variants")
}

// Images specific to each color variant
model ColorVariantImage {
  id             String   @id @default(uuid())
  colorVariantId String
  imageUrl       String
  altText        String?
  position       Int      @default(0)
  createdAt      DateTime @default(now())

  // Relations
  colorVariant ProductColorVariant @relation(fields: [colorVariantId], references: [id], onDelete: Cascade)

  @@index([colorVariantId])
  @@map("color_variant_images")
}

// Size variants under each color variant with individual pricing and stock
model ProductSizeVariant {
  id             String   @id @default(uuid())
  colorVariantId String
  sizeName       String   // e.g., "S", "M", "L", "XL", "X", "Custom"
  sku            String   @unique // Unique identifier for this specific variant
  basePrice      Float
  salePrice      Float?   // Original price for showing discounts
  stock          Int      @default(0)
  lowStockThreshold Int   @default(5)
  isAvailable    Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  colorVariant ProductColorVariant @relation(fields: [colorVariantId], references: [id], onDelete: Cascade)
  cartItems    CartItem[]
  orderItems   OrderItem[]

  @@unique([colorVariantId, sizeName])
  @@index([colorVariantId])
  @@index([sku])
  @@map("product_size_variants")
}

// ==================== CART & WISHLIST ====================

model Cart {
  id         String   @id @default(uuid())
  customerId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  customer Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items    CartItem[]

  @@map("carts")
}

model CartItem {
  id            String   @id @default(uuid())
  cartId        String
  sizeVariantId String
  quantity      Int      @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  cart        Cart               @relation(fields: [cartId], references: [id], onDelete: Cascade)
  sizeVariant ProductSizeVariant @relation(fields: [sizeVariantId], references: [id], onDelete: Cascade)

  @@unique([cartId, sizeVariantId])
  @@index([cartId])
  @@map("cart_items")
}

model Wishlist {
  id         String   @id @default(uuid())
  customerId String
  productId  String
  createdAt  DateTime @default(now())

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([customerId, productId])
  @@index([customerId])
  @@map("wishlists")
}

// ==================== ORDER MANAGEMENT ====================

model Order {
  id              String        @id @default(uuid())
  customerId      String
  orderNumber     String        @unique
  status          OrderStatus   @default(PENDING)
  shippingAddressId String
  billingAddressId  String?
  subtotal        Float
  shippingCost    Float         @default(0)
  taxAmount       Float         @default(0)
  discountAmount  Float         @default(0)
  totalAmount     Float
  notes           String?       @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  customer        Customer      @relation(fields: [customerId], references: [id], onDelete: Restrict)
  shippingAddress Address       @relation(fields: [shippingAddressId], references: [id], onDelete: Restrict)
  items           OrderItem[]
  payment         Payment?
  shipment        Shipment?

  @@index([customerId])
  @@index([orderNumber])
  @@index([status])
  @@map("orders")
}

model OrderItem {
  id            String   @id @default(uuid())
  orderId       String
  sellerId      String
  sizeVariantId String
  quantity      Int
  priceAtTime   Float    // Price at the time of purchase
  subtotal      Float    // quantity * priceAtTime
  createdAt     DateTime @default(now())

  // Relations
  order       Order              @relation(fields: [orderId], references: [id], onDelete: Cascade)
  sizeVariant ProductSizeVariant @relation(fields: [sizeVariantId], references: [id], onDelete: Restrict)
  seller      Seller             @relation(fields: [sellerId], references: [id], onDelete: Restrict)

  @@index([orderId])
  @@index([sellerId])
  @@index([sizeVariantId])
  @@map("order_items")
}

model Payment {
  id              String        @id @default(uuid())
  orderId         String        @unique
  paymentMethod   String        // e.g., "credit_card", "paypal", "stripe"
  transactionId   String?       @unique
  status          PaymentStatus @default(PENDING)
  amount          Float
  currency        String        @default("USD")
  paymentDate     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([transactionId])
  @@map("payments")
}

model Shipment {
  id              String   @id @default(uuid())
  orderId         String   @unique
  carrier         String?  // e.g., "UPS", "FedEx", "USPS"
  trackingNumber  String?
  shippedAt       DateTime?
  estimatedDelivery DateTime?
  deliveredAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  shippingStatus ShippingStatus @default(PENDING)

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([trackingNumber])
  @@map("shipments")
}

// ==================== REVIEWS ====================

model Review {
  id         String   @id @default(uuid())
  productId  String
  customerId String
  rating     Int      // 1-5 stars
  title      String?
  comment    String?  @db.Text
  isVerifiedPurchase Boolean @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([productId, customerId])
  @@index([productId])
  @@index([customerId])
  @@index([rating])
  @@map("reviews")
}
